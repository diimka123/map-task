{"version":3,"sources":["components/DragDropList/DragDropList.jsx","components/SearchLocation/SearchLocation.jsx","helpsJS/throttle.js","components/GoogleMap/Map.jsx","components/MapRouter.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","listRoot","padding","backgroundColor","listRootActive","iconButtonRoot","DragDropList","routers","setRouters","classes","length","ListItemText","style","primary","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","droppableId","provided","snapshot","List","droppableProps","ref","innerRef","map","item","key","place_id","draggableId","ListItem","root","isDragging","draggableProps","dragHandleProps","description","IconButton","edge","aria-label","onClick","filter","route","placeholder","autocompleteService","current","icon","color","palette","text","secondary","marginRight","spacing","width","marginBottom","inputRoot","labelRoot","transform","SearchLocation","useState","inputValue","setInputValue","options","setOptions","fetch","useMemo","func","ms","savedArgs","isThrottled","wrapper","arguments","apply","setTimeout","throttle","request","callback","getPlacePredictions","useEffect","active","window","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","getOptionLabel","option","value","blurOnSelect","clearOnBlur","onChange","event","newValue","onInputChange","newInputValue","onBlur","renderInput","params","TextField","label","variant","fullWidth","InputLabelProps","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","Grid","container","alignItems","className","xs","part","fontWeight","highlight","Typography","secondary_text","MapWithADirectionsRenderer","mapsObject","setMapsObject","directionsDisplay","useRef","directionsService","DirectionsService","DirectionsRenderer","waypoints","location","stopover","origin","query","setMap","slice","travelMode","TravelMode","DRIVING","status","DirectionsStatus","OK","setDirections","console","error","setCenter","lat","lng","height","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","MapRouter","Container","maxWidth","justify","marginTop","sm","md","Paper","elevation","Map","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.83ae68f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { ListItem, ListItemText, IconButton, List, makeStyles } from '@material-ui/core';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   listRoot: {\r\n      padding: '0px 15px',\r\n      '&&:hover': {\r\n         backgroundColor: '#F1FCFF'\r\n      }\r\n   },\r\n   listRootActive: {\r\n      padding: '0px 15px',\r\n      backgroundColor: '#F1FCFF'\r\n   },\r\n   iconButtonRoot: {\r\n      padding: '8px'\r\n   }\r\n}))\r\n\r\nfunction DragDropList({ routers, setRouters }) {\r\n   const classes = useStyles();\r\n\r\n   const onDragEnd = (result) => {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n         return;\r\n      }\r\n\r\n      const items = reorder(\r\n         routers,\r\n         result.source.index,\r\n         result.destination.index\r\n      );\r\n\r\n      setRouters(items);\r\n   }\r\n\r\n   return (\r\n      routers.length === 0\r\n         ?  \r\n         <ListItemText\r\n            style={{padding: \"10px 0px 10px 15px\"}}\r\n            primary=\"Добавьте точки маршрута...\"\r\n         />\r\n         :\r\n         (\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n               <Droppable droppableId=\"droppable\">\r\n                  {(provided, snapshot) => (\r\n                     <List\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                     >\r\n                        {routers.map((item, index) => (\r\n                           <Draggable key={item.place_id} draggableId={item.place_id} index={index}>\r\n                              {(provided, snapshot) => (\r\n                                 <ListItem\r\n                                    classes={\r\n                                       {\r\n                                          root: snapshot.isDragging ? classes.listRootActive : classes.listRoot\r\n                                       }\r\n                                    }\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                 >\r\n                                    <ListItemText\r\n                                       primary={`${item.description}`}\r\n                                    />\r\n                                    <IconButton \r\n                                       classes={{ root: classes.iconButtonRoot }} edge=\"end\" aria-label=\"delete\"\r\n                                       onClick={() => {\r\n                                          setRouters(routers.filter(route => route.place_id !== item.place_id))\r\n                                       }}\r\n                                    >\r\n                                       <HighlightOffIcon />\r\n                                    </IconButton>\r\n                                 </ListItem>\r\n                              )}\r\n                           </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                     </List>\r\n                  )}\r\n               </Droppable>\r\n            </DragDropContext>\r\n         )\r\n   )\r\n}\r\n\r\nexport default DragDropList\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport throttle from './../../helpsJS/throttle'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst autocompleteService = { current: null };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   icon: {\r\n      color: theme.palette.text.secondary,\r\n      marginRight: theme.spacing(2),\r\n   },\r\n   root: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   inputRoot: {\r\n      padding: '0px 10px !important',\r\n   },\r\n   labelRoot: {\r\n      transform: 'translate(14px, 12px)'\r\n   }\r\n}));\r\n\r\nfunction SearchLocation({ routers, setRouters }) {\r\n   const classes = useStyles();\r\n\r\n   const [inputValue, setInputValue] = useState('');\r\n   const [options, setOptions] = useState([]);\r\n\r\n   const fetch = useMemo(\r\n      () =>\r\n         throttle((request, callback) => {\r\n            autocompleteService.current.getPlacePredictions(request, callback);\r\n         }, 200),\r\n      [],\r\n   );\r\n\r\n   useEffect(() => {\r\n      \r\n      let active = true;\r\n\r\n      if (!autocompleteService.current && window.google) {\r\n         autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n      }\r\n      if (!autocompleteService.current) {\r\n         return undefined;\r\n      }\r\n\r\n      if (inputValue) {\r\n         fetch({ input: inputValue }, (results) => {\r\n            if (active) {\r\n               let newOptions = [];\r\n         \r\n               if (results) {\r\n                  newOptions = [...newOptions, ...results];\r\n               }\r\n   \r\n               setOptions(newOptions);\r\n            }\r\n         });\r\n      }\r\n\r\n      return () => {\r\n         active = false;\r\n      };\r\n   }, [inputValue, fetch]);\r\n\r\n   return (\r\n      <Autocomplete\r\n         classes={\r\n            {\r\n               root: classes.root,\r\n               inputRoot: classes.inputRoot\r\n            }\r\n         }\r\n         getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\r\n         options={options}\r\n         value={null}\r\n         blurOnSelect={true}\r\n         clearOnBlur={true}\r\n         onChange={(event, newValue) => {\r\n            setRouters([...routers, newValue])\r\n         }}\r\n         onInputChange={(event, newInputValue) => {\r\n            setInputValue(newInputValue);\r\n         }}\r\n         onBlur={() => { setOptions([]) }}\r\n         renderInput={(params) => (\r\n            <TextField {...params}\r\n               label=\"Add a new point...\"\r\n               variant=\"outlined\"\r\n               fullWidth\r\n               InputLabelProps={{\r\n                  classes: {\r\n                     root: classes.labelRoot\r\n                  }\r\n               }}\r\n            />\r\n         )}\r\n         renderOption={(option) => {\r\n\r\n            const matches = option.structured_formatting.main_text_matched_substrings;\r\n            const parts = parse(\r\n               option.structured_formatting.main_text,\r\n               matches.map((match) => [match.offset, match.offset + match.length]),\r\n            );\r\n\r\n            return (\r\n               <Grid container alignItems=\"center\">\r\n                  <Grid item>\r\n                     <LocationOnIcon className={classes.icon} />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                     {parts.map((part, index) => (\r\n                        <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                           {part.text}\r\n                        </span>\r\n                     ))}\r\n\r\n                     <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        {option.structured_formatting.secondary_text}\r\n                     </Typography>\r\n                  </Grid>\r\n               </Grid>\r\n            );\r\n         }}\r\n      />\r\n   );\r\n}\r\n\r\nexport default SearchLocation\r\n","export default function throttle(func, ms) {\r\n\r\n   let isThrottled = false;\r\n   let savedArgs;\r\n\r\n   function wrapper() {\r\n\r\n      if (isThrottled) {\r\n         savedArgs = arguments;\r\n         return;\r\n      }\r\n\r\n      func.apply(null, arguments);\r\n\r\n      isThrottled = true;\r\n\r\n      setTimeout(() => {\r\n         isThrottled = false;\r\n         if (savedArgs) {\r\n            wrapper.apply(null, savedArgs);\r\n            savedArgs = null;\r\n         }\r\n      }, ms);\r\n   }\r\n\r\n   return wrapper;\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nfunction MapWithADirectionsRenderer({ routers }) {\r\n\r\n   const [mapsObject, setMapsObject] = useState(null);\r\n   const directionsDisplay = useRef(null);\r\n\r\n   useEffect(() => {\r\n\r\n      if (mapsObject) {\r\n\r\n         const directionsService = new window.google.maps.DirectionsService();\r\n         \r\n         if (!directionsDisplay.current) {\r\n            directionsDisplay.current = new window.google.maps.DirectionsRenderer();\r\n         }\r\n\r\n         if (routers.length >= 2) {\r\n            \r\n            let waypoints = routers.map(route => ({\r\n               location: route.description,\r\n               stopover: true\r\n            }))\r\n            let origin = { query: routers[0].description };\r\n            let destination = { query: routers[routers.length - 1].description };\r\n\r\n            directionsDisplay.current.setMap(mapsObject.map);\r\n            directionsService.route(\r\n               {\r\n                  origin: origin,\r\n                  destination: destination,\r\n                  waypoints: waypoints && waypoints.slice(1, waypoints.length - 1),\r\n                  travelMode: window.google.maps.TravelMode.DRIVING\r\n               },\r\n               (result, status) => {\r\n                  if (status === window.google.maps.DirectionsStatus.OK) {\r\n                     directionsDisplay.current.setDirections(result);\r\n                  } else {\r\n                     console.error(`error fetching directions ${result}`);\r\n                  }\r\n               });\r\n         } else {\r\n\r\n            directionsDisplay.current.setMap(null);\r\n            mapsObject.map.setCenter({ lat: 53.9, lng: 27.56667 });\r\n\r\n         }\r\n\r\n      }\r\n\r\n   }, [routers, mapsObject])\r\n        \r\n   return (\r\n      <div style={{ width: '100%', height: '500px' }}>\r\n         <GoogleMapReact\r\n            defaultCenter={{ lat: 53.9, lng: 27.56667 }}\r\n            defaultZoom={10}\r\n            yesIWantToUseGoogleMapApiInternals\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n               setMapsObject({ map, maps });\r\n            }}>\r\n         </GoogleMapReact>\r\n      </div>\r\n   )\r\n}\r\n        \r\nexport default MapWithADirectionsRenderer","import React, { useState } from 'react';\r\nimport { Container, Paper, Grid } from '@material-ui/core';\r\nimport DragDropList from './DragDropList/DragDropList';\r\nimport SearchLocation from './SearchLocation/SearchLocation';\r\nimport Map from './GoogleMap/Map';\r\n\r\n\r\nfunction MapRouter() {\r\n\r\n   const [routers, setRouters] = useState([]);\r\n\r\n   return (\r\n      <Container maxWidth=\"md\">\r\n         <Grid container spacing={2} justify=\"center\" style={{ marginTop: '50px'}}>\r\n            <Grid item xs={10} sm={6} md={4}>\r\n               <Paper elevation={3}>\r\n                  <SearchLocation\r\n                     routers={routers}\r\n                     setRouters={setRouters}\r\n                  />\r\n               </Paper>\r\n               <Paper elevation={3}>\r\n                  <DragDropList\r\n                     routers={routers}\r\n                     setRouters={setRouters}\r\n                  />\r\n               </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={8}>\r\n               <Paper elevation={3}>\r\n                  <Map \r\n                     routers={routers}\r\n                  />\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n      </Container>\r\n   )\r\n}\r\n\r\nexport default MapRouter;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MapRouter from './components/MapRouter';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MapRouter />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}